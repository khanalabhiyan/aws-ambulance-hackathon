{
    "Comment": "A step function to conditionally invoke lambda according to service",
    "StartAt": "Choice",
    "States": {
      "Choice": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.service",
            "StringEquals": "s3",
            "Next": "Invoke s3 lambda"
          },
          {
            "Variable": "$.service",
            "StringEquals": "lambda",
            "Next": "Invoke lambda lambda"
          },
          {
            "Variable": "$.service",
            "StringEquals": "ec2",
            "Next": "Invoke ec2 lambda"
          }
        ],
        "Default": "Fail"
      },
      "Invoke s3 lambda": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "OutputPath": "$.Payload",
        "Parameters": {
          "Payload": {
            "bucketName.$": "$.resource_name",
            "region.$": "$.region"
          },
          "FunctionName": "${S3LambdaFunctionArn}"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException",
              "Lambda.TooManyRequestsException"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "BackoffRate": 2
          }
        ],
        "End": true
      },
      "Invoke lambda lambda": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "OutputPath": "$.Payload",
        "Parameters": {
          "Payload": {
            "lambdaName.$": "$.resource_name",
            "region.$": "$.region"
          },
          "FunctionName": "${LambdaLambdaFunctionArn}"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException",
              "Lambda.TooManyRequestsException"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "BackoffRate": 2
          }
        ],
        "End": true
      },
      "Invoke ec2 lambda": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "OutputPath": "$.Payload",
        "Parameters": {
          "Payload": {
            "bucketName.$": "$.resource_name",
            "region.$": "$.region"
          },
          "FunctionName": "${EC2LambdaFunctionArn}"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException",
              "Lambda.TooManyRequestsException"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "BackoffRate": 2
          }
        ],
        "End": true
      },
      "Fail": {
        "Type": "Fail"
      }
    }
  }